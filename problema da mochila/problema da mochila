import numpy as np
import random
import time
data = {
    "Item": list(range(1, 23)),
    "Peso (g)": [350, 250, 160, 120, 200, 100, 120, 220, 40, 80,
                 100, 300, 180, 250, 220, 150, 280, 310, 120, 160,
                 110, 210],
    "Valor": [300, 400, 450, 350, 250, 300, 200, 250, 150, 400,
              350, 300, 450, 500, 350, 400, 200, 300, 250, 300,
              150, 200]
}
max=sum(data["Valor"])

def fitness(gene):
  somaPeso=gene@(np.array(data["Peso (g)"]).T)
  somaValor=gene@(np.array(data["Valor"]).T)


  fitness=somaValor/max

  if(somaPeso>3000):
    return 0
  else:
    return fitness

def tournament_selection(p1, p2):
    p1Fit=fitness(p1)
    p2Fit=fitness(p2)

    if (p1Fit>p2Fit):
      return p1
    else:
      return p2

# Função de crossover
def crossover(parent1, parent2):
    point = random.randint(1, len(parent1) - 1)
    child1 = list(parent1[:point]) + list(parent2[point:])
    child2 = list(parent2[:point]) + list(parent1[point:])
    return child1, child2

# Função de mutação
def mutate(individual, mutation_rate):
    original_individual = individual[:]  # Armazena uma cópia do indivíduo antes da mutação
    individual = individual
    mutated = False  # Variável para rastrear se houve mutação

    for i in range(len(individual)):
        if random.random() < mutation_rate:
            individual[i] = 1 if individual[i] == 0 else 0
            mutated = True

    mutated_individual = individual

    #if mutated:
    #    print(f"\nMutação ocorreu! Indivíduo antes: {original_individual}, Indivíduo depois: {mutated_individual}")
    return mutated_individual

# Algoritmo evolucionário
def evolutiveAlgorithm(population, population_size, mutationRate, max_generations):
  for generation in range(max_generations):
      new_population = []

      while len(new_population) < population_size:
          # Seleção de pais
          parent1 = tournament_selection(population[random.randint(0,(population_size-1))],population[random.randint(0,(population_size-1))])
          parent2 = tournament_selection(population[random.randint(0,(population_size-1))],population[random.randint(0,(population_size-1))])
          # Crossover
          child1, child2 = crossover(parent1, parent2)

          # Mutação
          child1 = mutate(child1, mutationRate)
          child2 = mutate(child2, mutationRate)

          # Adicionar filhos à nova população
          new_population.extend([child1, child2])

      # Avaliação e seleção da nova geração
      population = sorted(new_population, key=lambda x: fitness(x), reverse=True)[:population_size]

      # Imprimir a população em cada geração
      #print(f"\nPopulação na geração {generation + 1}:")
      #for individual in population:
      #    print(f"Indivíduo: {individual}, Aptidão (fitness): {fitness(individual)}")

  # Melhor indivíduo encontrado
  best_individual = population[0]
  finalWeight=best_individual@(np.array(data["Peso (g)"]).T)
  best_value = best_individual@(np.array(data["Valor"]).T)
  return best_individual, finalWeight, best_value

# Inicialização da população com 100 indivíduos aleatórios
population_size = 100
population=np.random.randint(2, size=(population_size,22))
mutationRate=0.05

# Critério de término (número máximo de gerações)
max_generations = 100

best_individual, finalWeight, best_value = evolutiveAlgorithm(population, population_size, mutationRate, max_generations)

print(f"\nGerações: {max_generations}")
print(f"Aptidão (fitness) do melhor valor: {fitness(best_individual)}")
print(f"Melhor indivíduo (genótipo): {best_individual}")
print(f"Melhor valor (fenótipo): {best_value}")
print(f"Peso final: {finalWeight}")


